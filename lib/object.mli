(*
 * Copyright (c) 2013-2015 David Sheets <sheets@alum.mit.edu>
 * Copyright (c)      2015 Qi Li <liqi0425@gmail.com>
 * Copyright (c)      2015 Thomas Gazagnaire <thomas@gazagnaire.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *)

(** Build objects. *)

type id = [`Object] Id.t with sexp
(** The type for object identifiers. *)

type t
(** The type for object values. *)

val to_string: t -> string
(** [to_string t] is the string representing [t]. *)

val of_string: string -> t
(** [of_string s] is the object [t] whose string representation is
    [s]. *)

val id: t -> id
(** [id t] is [t]'s id. *)

val files: t -> string list
(** [files t] are the filenames generated by the object [t]. *)

val archive: t -> string * Cstruct.t
(** [archive t] is the name af the archive and its contents. *)

val create:
  id:id -> outputs:string list -> files:string list -> archive:(string * Cstruct.t) ->
  t
